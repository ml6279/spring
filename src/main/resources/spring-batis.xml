<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
    <!-- 加载配置JDBC文件 -->
    <context:property-placeholder location="classpath:database.properties"/>
    <!-- 数据源 -->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName"><value>${driver}</value></property>
        <property name="url"><value>${url}</value></property>
        <property name="username"><value>${user}</value></property>
        <property name="password"><value>${password}</value></property>
    </bean>-->
    <!--数据库连接池，号称并发最高的连接池-->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <property name="autoCommit" value="false"></property>
        <property name="jdbcUrl" value="${url}"></property>
        <property name="password" value="${password}"></property>
        <property name="username" value="${user}"></property>
        <property name="driverClassName" value="${driver}"></property>
        <property name="maximumPoolSize" value="5"></property>
    </bean>
    <!--开启事务的时候，使用了aop，如果你getBean的时候，使用实现类类型必须加 proxy-target-class="true"-->
    <aop:aspectj-autoproxy proxy-target-class="true"/><!--事务处理 开启spring切面-->
    <context:component-scan base-package="springbatis.service"/>
    <!--配置sqlSessionFactory bean-->
    <!--把mapper注入到spring容器中--><!--org.mybatis.spring.SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- mybatis配置文件路径 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!--配置sqlSession bean-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    <!--动态代理实现 不用写dao的实现-->
    <bean id="MapperScannerConfigurer"
          class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 这里的basePackage 指定了dao层接口路径，这里的dao接口不用自己实现 -->
        <property name="basePackage" value="springbatis.dao"/>
        <!--如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定-->
        <!-- 直接使用 sqlSessionTemplate的方式-->
        <property name="sqlSessionTemplateBeanName" value="sqlSession"/>
    </bean>
    <!--事务管理器-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--使用全注释事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>